name: CI

on:
  push:
    branches: [ main, master ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main, master ]

permissions:
  contents: write
  packages: write
  actions: read

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-13]
        rust: [stable]
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ matrix.rust }}
      
      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Run tests
        run: cargo test --verbose --all-targets
        timeout-minutes: 10
      
      - name: Check formatting
        run: cargo fmt -- --check
        if: matrix.os == 'ubuntu-latest'
      
      - name: Run clippy
        run: cargo clippy -- -D warnings
        if: matrix.os == 'ubuntu-latest'

  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: realm
            asset_name: realm-linux-amd64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: realm
            asset_name: realm-linux-arm64
            use_cross: true
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: realm.exe
            asset_name: realm-windows-amd64.exe
          - os: macos-13
            target: x86_64-apple-darwin
            artifact_name: realm
            asset_name: realm-macos-amd64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: realm
            asset_name: realm-macos-arm64
    steps:
      - uses: actions/checkout@v4
      
      - name: Read VERSION file
        id: version
        run: echo "VERSION=$(cat VERSION)" >> $GITHUB_OUTPUT
        shell: bash
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      
      - name: Add rust target
        run: rustup target add ${{ matrix.target }}
      
      - name: Install cross
        if: matrix.use_cross == true
        run: cargo install cross --git https://github.com/cross-rs/cross
      
      - name: Build (cargo)
        if: matrix.use_cross != true
        run: cargo build --release --target ${{ matrix.target }}
      
      - name: Build (cross)
        if: matrix.use_cross == true
        run: cross build --release --target ${{ matrix.target }}
      
      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: target/${{ matrix.target }}/release/${{ matrix.artifact_name }}

  release:
    name: Release
    needs: [test, build]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write
      packages: write
      actions: read
      issues: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Read VERSION file
        id: version
        run: echo "VERSION=$(cat VERSION)" >> $GITHUB_OUTPUT
      
      - name: Verify tag matches VERSION
        run: |
          TAG_VERSION=${GITHUB_REF#refs/tags/v}
          FILE_VERSION=$(cat VERSION)
          if [ "$TAG_VERSION" != "$FILE_VERSION" ]; then
            echo "Error: Tag version ($TAG_VERSION) doesn't match VERSION file ($FILE_VERSION)"
            exit 1
          fi
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      
      - name: Create checksums
        run: |
          cd artifacts
          for dir in */; do
            (cd "$dir" && sha256sum * > "../${dir%/}.sha256")
          done
      
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: Realm v${{ steps.version.outputs.VERSION }}
          draft: false
          prerelease: false
          body: |
            ## Changes
            See [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) for details.
            
            ## Installation
            
            ### macOS/Linux
            ```bash
            curl -sSfL https://github.com/${{ github.repository }}/releases/download/v${{ steps.version.outputs.VERSION }}/install.sh | bash
            ```
            
            ### Manual Download
            Download the appropriate binary for your platform below.
            
            ## Checksums
            SHA256 checksums are provided for each binary.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Upload Release Assets
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/*/*
            artifacts/*.sha256
            install.sh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

